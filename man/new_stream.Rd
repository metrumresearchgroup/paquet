% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream.R
\name{new_stream}
\alias{new_stream}
\alias{new_stream.list}
\alias{new_stream.data.frame}
\alias{new_stream.numeric}
\alias{new_stream.character}
\title{Create a stream of outputs and inputs}
\usage{
new_stream(x, ...)

\method{new_stream}{list}(x, locker = NULL, format = NULL, ask = FALSE, noreset = FALSE, ...)

\method{new_stream}{data.frame}(
  x,
  nchunk,
  cols = "ID",
  locker = NULL,
  format = NULL,
  ask = FALSE,
  noreset = FALSE,
  ...
)

\method{new_stream}{numeric}(x, ...)

\method{new_stream}{character}(x, ...)
}
\arguments{
\item{x}{A list or vector to template the stream; for the \code{numeric} method,
passing a single number will fill \code{x} with a sequence of that length.}

\item{...}{Additional arguments passed to \code{\link[=file_set]{file_set()}}.}

\item{locker}{Passed to \code{\link[=setup_locker]{setup_locker()}} as \code{dir}; important to note that the
directory will be unlinked if it exists and is an established locker
directory.}

\item{format}{Passed to \code{\link[=format_stream]{format_stream()}}.}

\item{ask}{If \code{TRUE}, then \code{\link[=config_locker]{config_locker()}} will be called on the
locker space; once this is called, all future attempts to reset the locker
contents will require user confirmation via \code{\link[utils:askYesNo]{utils::askYesNo()}}; the
\code{ask} requirement can be revoked by calling \code{\link[=config_locker]{config_locker()}}.}

\item{noreset}{If \code{TRUE} then \code{\link[=config_locker]{config_locker()}} will be called on the
locker directory with \code{noreset = TRUE} to prevent future resets; note that
this is essentially
a dead end; there is no way to make the locker space writable using public
api; use this option if you \strong{really} want to safeguard the output and
assume complete control over the fate of these files.}

\item{nchunk}{The number of chunks.}

\item{cols}{The name(s) of the column(s) specifying unique IDs to use to
split the \code{data.frame} into chunks; this could be a unique \code{ID} or a
combination of columns that when pasted together form a unique ID.}
}
\value{
A list with the following elements:
\itemize{
\item \code{i} the position number
\item \code{file} the output file name
\item \code{x} the input object.
}

The list has class \code{file_stream} as well as \code{locker_stream} (if \code{locker} was
passed) and a class attribute for the output if \code{format} was passed.
}
\description{
By stream we mean a list that pre-specifies the output file names,
replicate numbers and possibly input objects for a simulation. Passing
\code{locker} initiates a call to \code{\link[=setup_locker]{setup_locker()}}, which sets up or resets
the output directories. \strong{It is the responsibility of the user to take
advantage of the features provided by paquet to ensure the safety of outputs
stored in locker space}.
}
\details{
All methods contain \code{ask} and \code{noreset} arguments which get passed to
\code{\link[=setup_locker]{setup_locker()}}. Set \code{ask} to \code{TRUE} in order to require confirmation
(using \code{\link[utils:askYesNo]{utils::askYesNo()}}) every time the command is run again; set
\code{noreset} to \code{TRUE} to immediately revoke permission to reset the locker
space. Be sure to \strong{consider using these options} to prevent accidentally
resetting the locker space.

For the \code{data.frame} method, the data are chunked into a list by columns
listed in \code{cols}. Ideally, this is a single column that operates as
a unique \code{ID} across the data set and is used by \code{\link[=chunk_by_id]{chunk_by_id()}} to
form the chunks. Alternatively, \code{cols} can be multiple column names which
are pasted together to form a unique \code{ID} that is used for splitting
via \code{\link[=chunk_by_cols]{chunk_by_cols()}}.
}
\examples{
x <- new_stream(3)
x[[1]]

new_stream(2, locker = file.path(tempdir(), "foo"))

df <- data.frame(ID = c(1,2,3,4))
x <- new_stream(df, nchunk = 2)
x[[2]]

format_is_set(x[[2]])

x <- new_stream(3, format = "fst")
format_is_set(x[[2]])

}
\seealso{
\code{\link[=format_stream]{format_stream()}}, \code{\link[=locate_stream]{locate_stream()}}, \code{\link[=ext_stream]{ext_stream()}}, \code{\link[=file_stream]{file_stream()}},
\code{\link[=file_set]{file_set()}}, \code{\link[=config_locker]{config_locker()}}
}
