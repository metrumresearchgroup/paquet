[{"path":"/articles/file-stream.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"File Stream Workflow","text":"File streams objects can create help organizing larger simulations naturally broken series smaller simulations. One example set replicate simulations performed part simulation-based model checking. Another example large number doses need evaluated population context. case, one large data set assembled broken chunks simulated parallel. cases, assumed outputs (maybe inputs) large benefit extra layer organization, including consideration simulations stored disk accessed later time. emphasis use cases better management large simulation outputs. However, given package vignette, illustrate setup implementation problems (much) smaller scale.","code":""},{"path":"/articles/file-stream.html","id":"file-stream-basics","dir":"Articles","previous_headings":"","what":"File stream basics","title":"File Stream Workflow","text":"simplest use case, might want simulate large number replicates. can start manage simulation creating file stream creates file stream, just list one position representing replicate want slot holds another list containing information ith replicate. Looking replicate 5 three named positions replicate number file stem output file replicate x data payload replicate; case just stem output file named current replicate number (05) total number replicates set (10). file stem always configured format n N; can customized prefix use different separator character (see ). model data set simulated replicate use file stream object structure simulation used replicate number (fs$) tag output simulation. simple example get started basic idea. easily done simulation calling give identical results using file stream overkill. let’s use file stream object help us save simulations file efficient organized way.","code":"library(dplyr) library(paquet) library(mrgsolve) x <- new_stream(10) length(x) . [1] 10 x[[5]] . $i . [1] 5 .  . $file . [1] \"05-10\" .  . $x . [1] 5 .  . attr(,\"file_set_item\") . [1] TRUE mod <- house(rtol = 1e-4, outvars = \"DV\")  data <- expand.ev(amt = 100, ID = 10) out <- lapply(x, function(fs) {   mrgsim(mod, data) %>% mutate(i = fs$i) }) %>% bind_rows() out <- lapply(1:10, function(i) {   mrgsim(mod, data) %>% mutate(i = i) }) %>% bind_rows()"},{"path":"/articles/file-stream.html","id":"use-file-stream-to-create-a-data-set-on-disk","dir":"Articles","previous_headings":"","what":"Use file stream to create a data set on disk","title":"File Stream Workflow","text":"’ll add two arguments call new_stream() locker directory reserved set simulation output () format output format saving files Since package vignette, saving outputs tempdir(), something ’d recommend production work, simulations saved locally. also specified format fst, uses package name save data efficient format. Now let’s look object 5th replicate still (replicate number). now file populated complete path output file. can’t seen replicate directory created file stream created, directory files saved. Details storage locker provided . Also notice object new attribute indicates file saved fst format time comes. fst efficient format storing data frames R; can choose formats, like feather (also data frames) qs rds saving R object. save ith replicate pre-defined file location, call function write_stream() inside simulation loop Notice previous didn’t return data; ’s part strategy write data disk rather return potentially massive amount data easily swamp R session. return location file wrote makes easy read data back paquet provides helper function reading set fst files default, internalize_fst returns single data frame simulations. can also run head file set get list files","code":"locker <- file.path(tempdir(), \"replicate1\")  x <- new_stream(10, locker = locker, format = \"fst\") x[[5]] . $i . [1] 5 .  . $file . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/05-10.fst\" .  . $x . [1] 5 .  . attr(,\"file_set_item\") . [1] TRUE . attr(,\"class\") . [1] \"stream_format_fst\" \"list\" dir.exists(dirname(x[[5]]$file)) . [1] TRUE class(x[[5]]) . [1] \"stream_format_fst\" \"list\" basename(x[[5]]$file) . [1] \"05-10.fst\" out <- lapply(x, function(fs) {   ans <- mrgsim(mod, data) %>% mutate(i = fs$i)   write_stream(fs, ans)   return(fs$file) }) out[1:3] . [[1]] . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/01-10.fst\" .  . [[2]] . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/02-10.fst\" .  . [[3]] . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/03-10.fst\" library(fst) sims <- lapply(out, read_fst)  head(sims[[8]]) sims <- internalize_fst(locker) str(sims) head_fst(locker, n = 8) .   ID time       DV i . 1  1 0.00 0.000000 1 . 2  1 0.00 0.000000 1 . 3  1 0.25 1.287443 1 . 4  1 0.50 2.225213 1 . 5  1 0.75 2.904149 1 . 6  1 1.00 3.391513 1 . 7  1 1.25 3.737158 1 . 8  1 1.50 3.978021 1 fst <- list_fst(locker) fst[2] . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/02-10.fst\""},{"path":"/articles/file-stream.html","id":"alternate-better-file-formats","dir":"Articles","previous_headings":"","what":"Alternate (better) file formats","title":"File Stream Workflow","text":"fst excellent file format fast read write. notice internalize_fst() call, still reading data back R session. don’t ; just read first 5 files want better value price paid write outputs disk. arrow package comes . Apache Arrow “cross-language development platform -memory data.” Basically, can huge amount data disk arrow data set work loaded memory. following examples run arrow package installed vignette built. First, re-create file stream format feather Now, files ready stored feather format re-run simulation, ’ll set feather files rather fst files Notice change simulation code; still call write_stream() fs[[]] set feather output, get method writing. Now don’t need helper function read files; ’ll use arrow::open_dataset() ds object pointer data; hasn’t actually loaded can take peek data set open, can filter select rows columns want, call as_tibble() collect results Now part simulated data need work right now","code":"sims <- list_fst(locker)[1:5] %>% lapply(read_fst) %>% bind_rows() x <- new_stream(10, format = \"feather\", locker = locker) basename(x[[5]]$file) class(x[[5]]) out <- lapply(x, function(fs) {   ans <- mrgsim(mod, data) %>% mutate(i = fs$i)   write_stream(fs, ans)   return(fs$file) }) library(arrow)  ds <- arrow::open_dataset(locker, format = \"feather\") head(ds) sims <- filter(ds, time > 12, i < 5) %>% as_tibble() head(sims) dim(sims)"},{"path":"/articles/file-stream.html","id":"manipulating-file-streams","dir":"Articles","previous_headings":"","what":"Manipulating file streams","title":"File Stream Workflow","text":"basic example, created file stream like file stream created, can indicate output format fact put proper class file_stream object set file extension also functions adding output file path locate_stream() comes argument called initialize can used initialize locker space hasn’t already initialized reset. Finally, can manipulate file extension just removed file extension. adding file extension, sure include dot (.).","code":"x <- new_stream(10) x <- format_stream(x, \"fst\") x[[3]]$file . [1] \"03-10.fst\" class(x[[3]]) . [1] \"stream_format_fst\" \"list\" x <- locate_stream(x, locker) x[[2]]$file . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/02-10.fst\" x <- ext_stream(x, \"\") x[[4]]$file . [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//RtmpOkOqSo/replicate1/04-10\""},{"path":"/articles/file-stream.html","id":"pass-objects-via-file-stream","dir":"Articles","previous_headings":"","what":"Pass objects via file stream","title":"File Stream Workflow","text":"simple example, just numbered spot file stream object. Passing single number create sequence length Otherwise, can create custom sequence large data set, can chunk pass . Illustrating toy example chunk data frame list pass Now x position “chunk” data need current simulation; prevents entire data frame getting passed every worker.","code":"x <- new_stream(100) x <- new_stream(seq(1, 100, 4)) x[[2]] . $i . [1] 2 .  . $file . [1] \"02-25\" .  . $x . [1] 5 .  . attr(,\"file_set_item\") . [1] TRUE data <- expand.ev(amt = 100, ID = seq(10)) head(data) .   ID time amt cmt evid . 1  1    0 100   1    1 . 2  2    0 100   1    1 . 3  3    0 100   1    1 . 4  4    0 100   1    1 . 5  5    0 100   1    1 . 6  6    0 100   1    1 chunked <- chunk_by_row(data, nchunk = 5) x <- new_stream(chunked)  length(x) . [1] 5 x[[3]] . $i . [1] 3 .  . $file . [1] \"3-5\" .  . $x .   ID time amt cmt evid . 5  5    0 100   1    1 . 6  6    0 100   1    1 .  . attr(,\"file_set_item\") . [1] TRUE"},{"path":"/articles/file-stream.html","id":"the-locker-system","dir":"Articles","previous_headings":"","what":"The locker system","title":"File Stream Workflow","text":"important things know locker system; really makes arrow data sets work well. first create file stream locker location, need specify directory exist; directory exists, ’ll get error. create locker space, space reserved storing output files used storing files saved using write_stream(). locker space marked hidden file tells paquet locker space marked reserved space, whenever file stream initiated, locker space completely cleared files. say, files locker space blown away time file stream created re-created. say another way, new_stream() called locker creates locker space first time called completely clears space subsequent call locker name. really important remember process renews / resets time new_stream() called; equivalent writing existing files except happens two steps: first existing files removed new files created. Thus, locker world works mainly terms directories rather files (although obviously files also involved). ? reason able support arrow data sets. Using arrow::open_dataset(lockername) efficient way access large data stored disk. order work, files directory must contributing members data set. way reset data set space whenever data set re-written happens time file set created.","code":"x <- new_stream(3, locker = locker) list.files(locker, all.files = TRUE) . [1] \".\"                  \"..\"                 \".paquet-locker-dir\""},{"path":"/articles/file-stream.html","id":"safety-considerations","dir":"Articles","previous_headings":"The locker system","what":"Safety considerations","title":"File Stream Workflow","text":"Note locker meant folder disk resettable. say way can call write.csv(\"-data.csv\") -data.csv already exists, expect calling new_stream(..., locker = \"foo/bar\") (eventually) overwrite files foo/bar. really difference except must clear locker prior writing files. said, understand lockers can store large files expensive generate. , given user several options safeguard locker space next time paquet tries reset space. equivalent calling getting error asking confirmation -data.csv exists. user encouraged understand new_stream() works effectively use safeguards outlined . can properly safeguard data; give tools use . choose use tools, responsible intended un-intended consequences. safety tools place prevent accidental removal files locker space guarantee locker space point contain files intended retain; responsibility opt tools. Several approaches available secure future existing files may stored locker space: ask: set locker space asked every time locker reset requested noreset: make locker non-resettable; can done time locker space created fact version: create versioned back existing simulations","code":"write.csv(\"my-data.csv\")"},{"path":"/articles/file-stream.html","id":"ask","dir":"Articles","previous_headings":"The locker system > Safety considerations","what":"Ask","title":"File Stream Workflow","text":"code executed, provided example . require user confirmation locker reset, pass ask = TRUE creating new file stream command creates locker space foo/bar marks directory every time try reset locker space (clear output files), prompted confirm reset using utils::askYesNo. can also convert existing locker space asked every time locker reset attempted using can remove ask requirement Please read understand documentation setup_locker; anything clear, please ask.","code":"x <- new_stream(100, locker = \"foo/bar\", ask = TRUE) config_locker(\"foo/bar\", ask = TRUE) config_locker(\"foo/bar\", ask = FALSE)"},{"path":"/articles/file-stream.html","id":"no-reset","dir":"Articles","previous_headings":"The locker system > Safety considerations","what":"No Reset","title":"File Stream Workflow","text":"can mark locker space un-resettable. can done file stream created command creates locker space immediately revokes ability reset space. can also take existing locker space revoke One called, space can longer reset. restore reset-ability:","code":"x <- new_stream(100, locker = \"foo/bar\", noreset = TRUE) config_locker(\"foo/bar\", noreset = TRUE) config_locker(\"foo/bar\", noreset = FALSE)"},{"path":"/articles/file-stream.html","id":"versions","dir":"Articles","previous_headings":"The locker system > Safety considerations","what":"Versions","title":"File Stream Workflow","text":"save version simulations, call version_locker() creates new directory named according existing locker name, “version” tag attached, copies locker files new directory. See help topic ?version_locker options around versioning process. New versions automatically incremented (e.g. “locker-001”, “locker-002”) design. intent behind locker system create re-writable space. Versioning existing locker just convenient way stash existing simulations similar name. Note can also create new version call new_stream() Going forward, simulations saved “version 2” locker location already exists. nothing special setup; just creativity naming output directories. Caution advised: locker system created save large simulation outputs; continuously creating new versions, quickly overrun disk space. used care.","code":"y <- version_locker(locker, version = \"v000\") x <- new_stream(100, locker = \"existing/locker-v2\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle T Baron. Author, maintainer. Dan Polhamus. Contributor. Seth Green. Contributor. Kyle Meyer. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baron K (2022). paquet: File Streams Big Data. R package version 0.1.0, https://github.com/metrumresearchgroup/paquet.","code":"@Manual{,   title = {paquet: File Streams for Big Data},   author = {Kyle T Baron},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/metrumresearchgroup/paquet}, }"},{"path":"/index.html","id":"paquet","dir":"","previous_headings":"","what":"File Streams for Big Data","title":"File Streams for Big Data","text":"paquet helps create manage file streams saving large outputs created chunks packets. example, large simulation job might split packets processed parallel. Using paquet, worker can get unique output file name saving result packet reserved space disk large simulation results returned head node. Results stored way allows efficient handling fst file format feather / arrow data sets.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"File Streams for Big Data","text":"can install development version paquet GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"metrumresearchgroup/paquet\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"File Streams for Big Data","text":"illustrate paquet simulation mrgsolve. detailed example, see File Stream vignette running command: Let’s create input data set simulate. isn’t huge, ’re just illustrating workflow might create chunks process parallel worker node. , ’ll create file stream based chunks input data returns list data chunks example, 5th chunk saved feather format. create function generate outputs call write_stream() write outputs file Now outputs safely stored feather format file names since returned file names rather simulated data","code":"vignette(\"file-stream\", package = \"paquet\") library(paquet) library(dplyr) library(mrgsolve)  data <- expand.ev(   ID = seq(100),    amt = c(100, 300, 1000),    ii = 24,    addl = 9 ) %>% as_tibble() %>% mutate(dose = amt) data . # A tibble: 300 × 8 .       ID  time   amt    ii  addl   cmt  evid  dose .    <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> .  1     1     0   100    24     9     1     1   100 .  2     2     0   100    24     9     1     1   100 .  3     3     0   100    24     9     1     1   100 .  4     4     0   100    24     9     1     1   100 .  5     5     0   100    24     9     1     1   100 .  6     6     0   100    24     9     1     1   100 .  7     7     0   100    24     9     1     1   100 .  8     8     0   100    24     9     1     1   100 .  9     9     0   100    24     9     1     1   100 . 10    10     0   100    24     9     1     1   100 . # … with 290 more rows fs <- new_stream(data, nchunk = 5, locker = \"foo/mrgsolve\", format = \"feather\") fs[[5]] . $i . [1] 5 .  . $file . [1] \"foo/mrgsolve/5-5.feather\" .  . $x . # A tibble: 60 × 8 .       ID  time   amt    ii  addl   cmt  evid  dose .    <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> .  1   241     0  1000    24     9     1     1  1000 .  2   242     0  1000    24     9     1     1  1000 .  3   243     0  1000    24     9     1     1  1000 .  4   244     0  1000    24     9     1     1  1000 .  5   245     0  1000    24     9     1     1  1000 .  6   246     0  1000    24     9     1     1  1000 .  7   247     0  1000    24     9     1     1  1000 .  8   248     0  1000    24     9     1     1  1000 .  9   249     0  1000    24     9     1     1  1000 . 10   250     0  1000    24     9     1     1  1000 . # … with 50 more rows .  . attr(,\"file_set_item\") . [1] TRUE . attr(,\"class\") . [1] \"stream_format_feather\" \"list\" . [1] \"foo/mrgsolve/5-5.feather\" mod <- modlib(\"popex\")  simulate_chunk <- function(x) {      out <- mrgsim_df(mod, data = x$x, carry_out = \"dose\")        write_stream(x, out)      return(x$file) }  out <- lapply(fs, simulate_chunk) list.files(\"foo/mrgsolve\") . [1] \"1-5.feather\" \"2-5.feather\" \"3-5.feather\" \"4-5.feather\" \"5-5.feather\" out . [[1]] . [1] \"foo/mrgsolve/1-5.feather\" .  . [[2]] . [1] \"foo/mrgsolve/2-5.feather\" .  . [[3]] . [1] \"foo/mrgsolve/3-5.feather\" .  . [[4]] . [1] \"foo/mrgsolve/4-5.feather\" .  . [[5]] . [1] \"foo/mrgsolve/5-5.feather\""},{"path":"/index.html","id":"using-arrow-to-read-paquet-outputs","dir":"","previous_headings":"","what":"Using arrow to read paquet outputs","title":"File Streams for Big Data","text":"Apache arrow advance platform handling large data sets. formal connection paquet arrow, paquet designed set output files way makes easy access arrow. used format = \"feather\" mrgsolve simulation saved files locker space disk. can read simulations using open_dataset() function provided arrow doesn’t read data, just gets handle . Using arrow, can filter select data want feather files actually reading files don’t read data don’t ultimately want","code":"library(arrow)  ds <- open_dataset(\"foo/mrgsolve\", format = \"feather\")  ds . FileSystemDataset with 5 Feather files . ID: double . time: double . dose: double . GUT: double . CENT: double . CL: double . V: double . ECL: double . IPRED: double . DV: double .  . See $metadata for additional Schema metadata sims <-    ds %>%   filter(dose == 100) %>%    select(ID, time, DV) %>%    as_tibble()  sims . # A tibble: 48,200 × 3 .       ID  time    DV .    <dbl> <dbl> <dbl> .  1    61   0    0    .  2    61   0    0    .  3    61   0.5  1.55 .  4    61   1    2.66 .  5    61   1.5  3.45 .  6    61   2    4.01 .  7    61   2.5  4.40 .  8    61   3    4.66 .  9    61   3.5  4.83 . 10    61   4    4.93 . # … with 48,190 more rows"},{"path":"/index.html","id":"using-fst-to-save-and-read-outputs","dir":"","previous_headings":"","what":"Using fst to save and read outputs","title":"File Streams for Big Data","text":"previous example, used feather format save simulated outputs interacted outputs using arrow::open_dataset(). can use simulation function save files fst format instead Note requested fst formatted outputs pointed new space disk. simulate using simulate_chunk Now can’t use arrow read files, can use fst. paquet provides tools internalizing fst outputs well tooling process sequentially. fst package configured work data.table, required. However, might recommended processing large outputs.","code":"fs2 <- new_stream(data, nchunk = 5, format = \"fst\", locker = \"foo/fst-output\") out <- lapply(fs2, simulate_chunk) sims2 <- internalize_fst(\"foo/fst-output\") %>% bind_rows()  head(sims2) .   ID time dose        GUT     CENT        CL        V         ECL    IPRED . 1  1  0.0  100   0.000000  0.00000 0.9205288 14.84469 -0.08280697 0.000000 . 2  1  0.0  100 100.000000  0.00000 0.9205288 14.84469 -0.08280697 0.000000 . 3  1  0.5  100  48.456256 50.65872 0.9205288 14.84469 -0.08280697 3.412582 . 4  1  1.0  100  23.480087 73.65945 0.9205288 14.84469 -0.08280697 4.962007 . 5  1  1.5  100  11.377571 83.30537 0.9205288 14.84469 -0.08280697 5.611796 . 6  1  2.0  100   5.513145 86.52583 0.9205288 14.84469 -0.08280697 5.828739 .         DV . 1 0.000000 . 2 0.000000 . 3 3.412582 . 4 4.962007 . 5 5.611796 . 6 5.828739 library(data.table) library(fst)  files <- list_fst(\"foo/fst-output\")  sims3 <- lapply(files, function(file) {      result <- read_fst(file, as.data.table = TRUE)      result[dose == 100, c(\"ID\", \"time\", \"DV\")]  }) %>% rbindlist() sims3 .         ID  time       DV .     1:   1   0.0 0.000000 .     2:   1   0.0 0.000000 .     3:   1   0.5 3.412582 .     4:   1   1.0 4.962007 .     5:   1   1.5 5.611796 .    ---                    . 48196: 100 238.0 4.871450 . 48197: 100 238.5 4.819019 . 48198: 100 239.0 4.766864 . 48199: 100 239.5 4.715013 . 48200: 100 240.0 4.663491"},{"path":"/reference/chunk_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Chunk a data frame — chunk_data_frame","title":"Chunk a data frame — chunk_data_frame","text":"Use chunk_by_id split data set ID column; use chunk_by_row split data set rows.","code":""},{"path":"/reference/chunk_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chunk a data frame — chunk_data_frame","text":"","code":"chunk_by_id(data, nchunk, id_col = \"ID\", mark = NULL)  chunk_by_cols(data, nchunk, cols, mark = NULL)  chunk_by_row(data, nchunk, mark = NULL)"},{"path":"/reference/chunk_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chunk a data frame — chunk_data_frame","text":"data data frame. nchunk number chunks. id_col Character name specifying column containing ID chunking. mark populated character label, adds column chunked data frames name value integer group number. cols character vector columns use deriving ID use chunking.","code":""},{"path":"/reference/chunk_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chunk a data frame — chunk_data_frame","text":"list data frames.","code":""},{"path":"/reference/chunk_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chunk a data frame — chunk_data_frame","text":"","code":"x <- expand.grid(ID = 1:10, B = rev(1:10))  chunk_by_id(x, nchunk = 3) #> $`1` #>    ID  B #> 1   1 10 #> 2   2 10 #> 3   3 10 #> 4   4 10 #> 11  1  9 #> 12  2  9 #> 13  3  9 #> 14  4  9 #> 21  1  8 #> 22  2  8 #> 23  3  8 #> 24  4  8 #> 31  1  7 #> 32  2  7 #> 33  3  7 #> 34  4  7 #> 41  1  6 #> 42  2  6 #> 43  3  6 #> 44  4  6 #> 51  1  5 #> 52  2  5 #> 53  3  5 #> 54  4  5 #> 61  1  4 #> 62  2  4 #> 63  3  4 #> 64  4  4 #> 71  1  3 #> 72  2  3 #> 73  3  3 #> 74  4  3 #> 81  1  2 #> 82  2  2 #> 83  3  2 #> 84  4  2 #> 91  1  1 #> 92  2  1 #> 93  3  1 #> 94  4  1 #>  #> $`2` #>    ID  B #> 5   5 10 #> 6   6 10 #> 7   7 10 #> 15  5  9 #> 16  6  9 #> 17  7  9 #> 25  5  8 #> 26  6  8 #> 27  7  8 #> 35  5  7 #> 36  6  7 #> 37  7  7 #> 45  5  6 #> 46  6  6 #> 47  7  6 #> 55  5  5 #> 56  6  5 #> 57  7  5 #> 65  5  4 #> 66  6  4 #> 67  7  4 #> 75  5  3 #> 76  6  3 #> 77  7  3 #> 85  5  2 #> 86  6  2 #> 87  7  2 #> 95  5  1 #> 96  6  1 #> 97  7  1 #>  #> $`3` #>     ID  B #> 8    8 10 #> 9    9 10 #> 10  10 10 #> 18   8  9 #> 19   9  9 #> 20  10  9 #> 28   8  8 #> 29   9  8 #> 30  10  8 #> 38   8  7 #> 39   9  7 #> 40  10  7 #> 48   8  6 #> 49   9  6 #> 50  10  6 #> 58   8  5 #> 59   9  5 #> 60  10  5 #> 68   8  4 #> 69   9  4 #> 70  10  4 #> 78   8  3 #> 79   9  3 #> 80  10  3 #> 88   8  2 #> 89   9  2 #> 90  10  2 #> 98   8  1 #> 99   9  1 #> 100 10  1 #>   chunk_by_row(x, nchunk = 4) #> $`1` #>    ID  B #> 1   1 10 #> 2   2 10 #> 3   3 10 #> 4   4 10 #> 5   5 10 #> 6   6 10 #> 7   7 10 #> 8   8 10 #> 9   9 10 #> 10 10 10 #> 11  1  9 #> 12  2  9 #> 13  3  9 #> 14  4  9 #> 15  5  9 #> 16  6  9 #> 17  7  9 #> 18  8  9 #> 19  9  9 #> 20 10  9 #> 21  1  8 #> 22  2  8 #> 23  3  8 #> 24  4  8 #> 25  5  8 #>  #> $`2` #>    ID B #> 26  6 8 #> 27  7 8 #> 28  8 8 #> 29  9 8 #> 30 10 8 #> 31  1 7 #> 32  2 7 #> 33  3 7 #> 34  4 7 #> 35  5 7 #> 36  6 7 #> 37  7 7 #> 38  8 7 #> 39  9 7 #> 40 10 7 #> 41  1 6 #> 42  2 6 #> 43  3 6 #> 44  4 6 #> 45  5 6 #> 46  6 6 #> 47  7 6 #> 48  8 6 #> 49  9 6 #> 50 10 6 #>  #> $`3` #>    ID B #> 51  1 5 #> 52  2 5 #> 53  3 5 #> 54  4 5 #> 55  5 5 #> 56  6 5 #> 57  7 5 #> 58  8 5 #> 59  9 5 #> 60 10 5 #> 61  1 4 #> 62  2 4 #> 63  3 4 #> 64  4 4 #> 65  5 4 #> 66  6 4 #> 67  7 4 #> 68  8 4 #> 69  9 4 #> 70 10 4 #> 71  1 3 #> 72  2 3 #> 73  3 3 #> 74  4 3 #> 75  5 3 #>  #> $`4` #>     ID B #> 76   6 3 #> 77   7 3 #> 78   8 3 #> 79   9 3 #> 80  10 3 #> 81   1 2 #> 82   2 2 #> 83   3 2 #> 84   4 2 #> 85   5 2 #> 86   6 2 #> 87   7 2 #> 88   8 2 #> 89   9 2 #> 90  10 2 #> 91   1 1 #> 92   2 1 #> 93   3 1 #> 94   4 1 #> 95   5 1 #> 96   6 1 #> 97   7 1 #> 98   8 1 #> 99   9 1 #> 100 10 1 #>"},{"path":"/reference/config_locker.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure a locker directory — config_locker","title":"Configure a locker directory — config_locker","text":"Configure locker directory","code":""},{"path":"/reference/config_locker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure a locker directory — config_locker","text":"","code":"config_locker(where, ask = NULL, noreset = NULL)"},{"path":"/reference/config_locker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure a locker directory — config_locker","text":"locker location. ask Logical; toggles whether user asked confirm prior resetting locker space. noreset Logical; toggles whether locker space resettable.","code":""},{"path":"/reference/ext_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or change the file extension on file_stream names — ext_stream","title":"Set or change the file extension on file_stream names — ext_stream","text":"Add update file extension items file_stream object. file extension exists, removed first.","code":""},{"path":"/reference/ext_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or change the file extension on file_stream names — ext_stream","text":"","code":"ext_stream(x, ext)"},{"path":"/reference/ext_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or change the file extension on file_stream names — ext_stream","text":"x file_stream object. ext new extension.","code":""},{"path":[]},{"path":"/reference/ext_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or change the file extension on file_stream names — ext_stream","text":"","code":"x <- new_stream(3) x <- ext_stream(x, \"feather\") x[[1]]$file #> [1] \"1-3feather\""},{"path":"/reference/file_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of file objects — file_set","title":"Generate a sequence of file objects — file_set","text":"File names numbered core communicates current file number well total number files set. example, 02-20 indicate second file set 20. customizations can added.","code":""},{"path":"/reference/file_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of file objects — file_set","text":"","code":"file_set(n, where = NULL, prefix = NULL, pad = TRUE, sep = \"-\", ext = \"\")"},{"path":"/reference/file_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of file objects — file_set","text":"n number file names create. optional output file path. prefix character prefix file name. pad TRUE, numbers padded zeros. sep Separator character. ext file extension, including dot.","code":""},{"path":"/reference/file_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a sequence of file objects — file_set","text":"default list length n lists length 2; sublist contains integer file number file name file.","code":""},{"path":[]},{"path":"/reference/file_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence of file objects — file_set","text":"","code":"x <- file_set(3, where = \"foo/bar\") length(x) #> [1] 3 x[2] #> [1] \"foo/bar/2-3\"  x <- file_set(25, ext = \".feather\") x[17] #> [1] \"17-25.feather\""},{"path":"/reference/file_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a stream of files — file_stream","title":"Create a stream of files — file_stream","text":"Optionally, setup locker storage space disk specific file format (e.g. fst feather).","code":""},{"path":"/reference/file_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a stream of files — file_stream","text":"","code":"file_stream(   n,   locker = NULL,   format = NULL,   where = NULL,   ask = FALSE,   noreset = FALSE,   ... )"},{"path":"/reference/file_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a stream of files — file_stream","text":"n number file names generate; must single numeric value greater equal 1. locker Passed setup_locker() dir; important note directory unlinked exists established locker directory. format Passed format_stream(). optional file path; replaced locker also passed. ask TRUE, config_locker() called locker space; called, future attempts reset locker contents require user confirmation via utils::askYesNo(); ask requirement can revoked calling config_locker(). noreset TRUE config_locker() called locker directory noreset = TRUE prevent future resets; note essentially dead end; way make locker space writable using public api; use option really want safeguard output assume complete control fate files. ... Additional arguments passed file_set().","code":""},{"path":"/reference/file_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a stream of files — file_stream","text":"user encouraged read documentation understand ask noreset arguments. may important tools use ensure safety outputs stored locker space. Pass locker set locker space saving outputs; involves clearing locker directory (see setup_locker() details). Passing locker also sets path output files. want set path output files without setting locker space, pass .","code":""},{"path":[]},{"path":"/reference/file_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a stream of files — file_stream","text":"","code":"x <- file_stream(3, locker = temp_ds(\"foo\"), format = \"fst\") x[[1]] #> $i #> [1] 1 #>  #> $file #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/foo/1-3.fst\" #>  #> attr(,\"file_set_item\") #> [1] TRUE #> attr(,\"class\") #> [1] \"stream_format_fst\" \"list\""},{"path":"/reference/format_is_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Check format status of file set item — format_is_set","title":"Check format status of file set item — format_is_set","text":"can used check file set item assigned output format (e.g. fst, feather, qs rds). check returns FALSE signal data returned rather calling write_stream().","code":""},{"path":"/reference/format_is_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check format status of file set item — format_is_set","text":"","code":"format_is_set(x)  is.stream_format(x)"},{"path":"/reference/format_is_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check format status of file set item — format_is_set","text":"x object, usually file_set_item.","code":""},{"path":"/reference/format_is_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check format status of file set item — format_is_set","text":"Logical indicating x inherits one stream format classes. .","code":""},{"path":"/reference/format_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the format for a stream_file object — format_stream","title":"Set the format for a stream_file object — format_stream","text":"format set file objects inside list file object can used call write method. See write_stream().","code":""},{"path":"/reference/format_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the format for a stream_file object — format_stream","text":"","code":"format_stream(   x,   type = c(\"fst\", \"feather\", \"qs\", \"rds\"),   set_ext = TRUE,   warn = FALSE )"},{"path":"/reference/format_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the format for a stream_file object — format_stream","text":"x file_stream object. type file format type; feather chosen, check made ensure arrow package loaded. set_ext TRUE, existing extension (exists) stripped new extension added based value type. warn TRUE warning issued case output format set directory path associated file spot x[[1]].","code":""},{"path":"/reference/format_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the format for a stream_file object — format_stream","text":"x returned new class attribute reflecting expected output format (fst, feather (arrow), qs rds).","code":""},{"path":[]},{"path":"/reference/format_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the format for a stream_file object — format_stream","text":"","code":"fs <- new_stream(2) fs <- format_stream(fs, \"fst\") fs[[1]] #> $i #> [1] 1 #>  #> $file #> [1] \"1-2.fst\" #>  #> $x #> [1] 1 #>  #> attr(,\"file_set_item\") #> [1] TRUE #> attr(,\"class\") #> [1] \"stream_format_fst\" \"list\"               format_is_set(fs[[1]])   #> [1] TRUE"},{"path":"/reference/head_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the head of an fst file set — head_fst","title":"Get the head of an fst file set — head_fst","text":"Get head fst file set","code":""},{"path":"/reference/head_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the head of an fst file set — head_fst","text":"","code":"head_fst(path, n = 5, i = 1)"},{"path":"/reference/head_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the head of an fst file set — head_fst","text":"path directory search. n Number rows show. output output chunk show.","code":""},{"path":[]},{"path":"/reference/internalize_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the contents of an fst file set — internalize_fst","title":"Get the contents of an fst file set — internalize_fst","text":"Get contents fst file set","code":""},{"path":"/reference/internalize_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the contents of an fst file set — internalize_fst","text":"","code":"internalize_fst(path, ...)  get_fst(path, ...)"},{"path":"/reference/internalize_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the contents of an fst file set — internalize_fst","text":"path directory search. ... arguments passed fst::read_fst().","code":""},{"path":[]},{"path":"/reference/is.file_set_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a file_set_item — is.file_set_item","title":"Check if an object is a file_set_item — is.file_set_item","text":"Check object file_set_item","code":""},{"path":"/reference/is.file_set_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a file_set_item — is.file_set_item","text":"","code":"is.file_set_item(x)"},{"path":"/reference/is.file_set_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a file_set_item — is.file_set_item","text":"x object.","code":""},{"path":"/reference/is.file_set_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a file_set_item — is.file_set_item","text":"Logical value indicating x file_set_item attribute set..","code":""},{"path":"/reference/is.file_set_item.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a file_set_item — is.file_set_item","text":"","code":"x <- new_stream(2) is.file_set_item(x[[2]]) #> [1] TRUE"},{"path":"/reference/is.file_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object inherits from file_stream — is.file_stream","title":"Check if an object inherits from file_stream — is.file_stream","text":"Check object inherits file_stream","code":""},{"path":"/reference/is.file_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object inherits from file_stream — is.file_stream","text":"","code":"is.file_stream(x)"},{"path":"/reference/is.file_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object inherits from file_stream — is.file_stream","text":"x object.","code":""},{"path":"/reference/is.file_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object inherits from file_stream — is.file_stream","text":"Logical value indicating x inherits file_stream.","code":""},{"path":"/reference/is.file_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object inherits from file_stream — is.file_stream","text":"","code":"x <- new_stream(2) is.file_stream(x) #> [1] TRUE"},{"path":"/reference/is.locker_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object inherits from locker_stream — is.locker_stream","title":"Check if an object inherits from locker_stream — is.locker_stream","text":"Check object inherits locker_stream","code":""},{"path":"/reference/is.locker_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object inherits from locker_stream — is.locker_stream","text":"","code":"is.locker_stream(x)"},{"path":"/reference/is.locker_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object inherits from locker_stream — is.locker_stream","text":"x object.","code":""},{"path":"/reference/is.locker_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object inherits from locker_stream — is.locker_stream","text":"Logical value indicating x inherits locker_stream.","code":""},{"path":"/reference/is.locker_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object inherits from locker_stream — is.locker_stream","text":"","code":"x <- new_stream(2, locker = temp_ds(\"locker-stream-example\")) is.locker_stream(x) #> [1] TRUE"},{"path":"/reference/is_locker_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a directory is dedicated locker space — is_locker_dir","title":"Check if a directory is dedicated locker space — is_locker_dir","text":"Check directory dedicated locker space","code":""},{"path":"/reference/is_locker_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a directory is dedicated locker space — is_locker_dir","text":"","code":"is_locker_dir(where)"},{"path":"/reference/is_locker_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a directory is dedicated locker space — is_locker_dir","text":"locker location.","code":""},{"path":"/reference/list_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"List all output files in a fst file set — list_fst","title":"List all output files in a fst file set — list_fst","text":"Use function read .fst files saved bg_mrgsim_d called .path passed along .format = \"fst\".","code":""},{"path":"/reference/list_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all output files in a fst file set — list_fst","text":"","code":"list_fst(path)"},{"path":"/reference/list_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all output files in a fst file set — list_fst","text":"path (full) directory path search.","code":""},{"path":"/reference/locate_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or change the directory for file_stream objects — locate_stream","title":"Set or change the directory for file_stream objects — locate_stream","text":"Add update directory location items file_stream object. directory path already exists, removed first.","code":""},{"path":"/reference/locate_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or change the directory for file_stream objects — locate_stream","text":"","code":"locate_stream(x, where, initialize = FALSE, ask = FALSE)"},{"path":"/reference/locate_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or change the directory for file_stream objects — locate_stream","text":"x file_stream object. new location. initialize TRUE, directory passed call reset_locker(). ask TRUE, config_locker() called locker space; called, future attempts reset locker contents require user confirmation via utils::askYesNo(); ask requirement can revoked calling config_locker().","code":""},{"path":"/reference/locate_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set or change the directory for file_stream objects — locate_stream","text":"initialize set TRUE, locker space initialized reset. order initialize, must exist must previously set locker space. See setup_locker() details.","code":""},{"path":[]},{"path":"/reference/locate_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or change the directory for file_stream objects — locate_stream","text":"","code":"x <- new_stream(5) x <- locate_stream(x, file.path(tempdir(), \"foo\")) x[[1]]$file #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/foo/1-5\""},{"path":"/reference/new_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a stream of outputs and inputs — new_stream","title":"Create a stream of outputs and inputs — new_stream","text":"stream mean list pre-specifies output file names, replicate numbers possibly input objects simulation. Passing locker initiates call setup_locker(), sets resets output directories. responsibility user take advantage features provided paquet ensure safety outputs stored locker space.","code":""},{"path":"/reference/new_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a stream of outputs and inputs — new_stream","text":"","code":"new_stream(x, ...)  # S3 method for list new_stream(x, locker = NULL, format = NULL, ask = FALSE, noreset = FALSE, ...)  # S3 method for data.frame new_stream(   x,   nchunk,   cols = \"ID\",   locker = NULL,   format = NULL,   ask = FALSE,   noreset = FALSE,   ... )  # S3 method for numeric new_stream(x, ...)  # S3 method for character new_stream(x, ...)"},{"path":"/reference/new_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a stream of outputs and inputs — new_stream","text":"x list vector template stream; numeric method, passing single number fill x sequence length. ... Additional arguments passed file_set(). locker Passed setup_locker() dir; important note directory unlinked exists established locker directory. format Passed format_stream(). ask TRUE, config_locker() called locker space; called, future attempts reset locker contents require user confirmation via utils::askYesNo(); ask requirement can revoked calling config_locker(). noreset TRUE config_locker() called locker directory noreset = TRUE prevent future resets; note essentially dead end; way make locker space writable using public api; use option really want safeguard output assume complete control fate files. nchunk number chunks. cols name(s) column(s) specifying unique IDs use split data.frame chunks; unique ID combination columns pasted together form unique ID.","code":""},{"path":"/reference/new_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a stream of outputs and inputs — new_stream","text":"list following elements: position number file output file name x input object. list class file_stream well locker_stream (locker passed) class attribute output format passed.","code":""},{"path":"/reference/new_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a stream of outputs and inputs — new_stream","text":"methods contain ask noreset arguments get passed setup_locker(). Set ask TRUE order require confirmation (using utils::askYesNo()) every time command run ; set noreset TRUE immediately revoke permission reset locker space. sure consider using options prevent accidentally resetting locker space. data.frame method, data chunked list columns listed cols. Ideally, single column operates unique ID across data set used chunk_by_id() form chunks. Alternatively, cols can multiple column names pasted together form unique ID used splitting via chunk_by_cols().","code":""},{"path":[]},{"path":"/reference/new_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a stream of outputs and inputs — new_stream","text":"","code":"x <- new_stream(3) x[[1]] #> $i #> [1] 1 #>  #> $file #> [1] \"1-3\" #>  #> $x #> [1] 1 #>  #> attr(,\"file_set_item\") #> [1] TRUE  new_stream(2, locker = file.path(tempdir(), \"foo\")) #> [[1]] #> [[1]]$i #> [1] 1 #>  #> [[1]]$file #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/foo/1-2\" #>  #> [[1]]$x #> [1] 1 #>  #> attr(,\"file_set_item\") #> [1] TRUE #>  #> [[2]] #> [[2]]$i #> [1] 2 #>  #> [[2]]$file #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/foo/2-2\" #>  #> [[2]]$x #> [1] 2 #>  #> attr(,\"file_set_item\") #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"file_stream\"   \"locker_stream\" \"list\"           df <- data.frame(ID = c(1,2,3,4)) x <- new_stream(df, nchunk = 2) x[[2]] #> $i #> [1] 2 #>  #> $file #> [1] \"2-2\" #>  #> $x #>   ID #> 3  3 #> 4  4 #>  #> attr(,\"file_set_item\") #> [1] TRUE  format_is_set(x[[2]]) #> [1] FALSE  x <- new_stream(3, format = \"fst\") format_is_set(x[[2]]) #> [1] TRUE"},{"path":"/reference/paquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for creating and managing file streams — paquet","title":"Tools for creating and managing file streams — paquet","text":"Tools creating managing file streams","code":""},{"path":"/reference/reset_locker.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the locker directory — reset_locker","title":"Initialize the locker directory — reset_locker","text":"function called setup_locker() initialize re-initialize locker directory. call reset_locker expected locker space created repeatedly reset simulations run re-run.","code":""},{"path":"/reference/reset_locker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the locker directory — reset_locker","text":"","code":"reset_locker(where, pattern = NULL)"},{"path":"/reference/reset_locker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the locker directory — reset_locker","text":"full path locker. pattern regular expression finding files clear locker directory.","code":""},{"path":"/reference/reset_locker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the locker directory — reset_locker","text":"user confirmation reset previously requested via setup_locker() config_locker(), user asked confirm prior reset. locker space initialized, directory must exist; exists, error. also error exist contain particular hidden locker file name marks directory established locker space. NOTE: locker reset, contents cleared according files matched pattern. un-matched files exist clearing directory, warning issued.","code":""},{"path":[]},{"path":"/reference/setup_locker.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a data storage locker — setup_locker","title":"Set up a data storage locker — setup_locker","text":"locker directory structure enclosing folder contains subfolders turn contain results different simulation runs. number simulation result sets known, stream file names returned. function mainly called functions; exported function documentation provided order better communicate locker works.","code":""},{"path":"/reference/setup_locker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a data storage locker — setup_locker","text":"","code":"setup_locker(where, tag = locker_tag(where), ask = FALSE, noreset = FALSE)"},{"path":"/reference/setup_locker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a data storage locker — setup_locker","text":"directory contains tagged directories run results. tag name folder ; directory must exist first time locker set deleted re-created time used store output new simulation run. ask TRUE, config_locker() called locker space; called, future attempts reset locker contents require user confirmation via utils::askYesNo(); ask requirement can revoked calling config_locker(). noreset TRUE config_locker() called locker directory noreset = TRUE prevent future resets; note essentially dead end; way make locker space writable using public api; use option really want safeguard output assume complete control fate files.","code":""},{"path":"/reference/setup_locker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a data storage locker — setup_locker","text":"locker location.","code":""},{"path":"/reference/setup_locker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up a data storage locker — setup_locker","text":"user encouraged read documentation understand ask noreset arguments. may important tools use ensure safety outputs stored locker space. must exist setting locker. directory tag created must exist except previously set using setup_locker. Existing tag directories hidden file indicating established simulation output folders. recreating tag directory, unlinked created new. try set locker directory already contains outputs need preserved. can call config_locker() directory noreset = TRUE prevent future resets.","code":""},{"path":[]},{"path":"/reference/setup_locker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a data storage locker — setup_locker","text":"","code":"x <- setup_locker(tempdir(), tag = \"my-sims\") x #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/my-sims\""},{"path":"/reference/temp_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a path to a dataset in tempdir — temp_ds","title":"Create a path to a dataset in tempdir — temp_ds","text":"Create path dataset tempdir","code":""},{"path":"/reference/temp_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a path to a dataset in tempdir — temp_ds","text":"","code":"temp_ds(tag)"},{"path":"/reference/temp_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a path to a dataset in tempdir — temp_ds","text":"tag dataset subdirectory.","code":""},{"path":"/reference/version_locker.html","id":null,"dir":"Reference","previous_headings":"","what":"Version locker contents — version_locker","title":"Version locker contents — version_locker","text":"Version locker contents","code":""},{"path":"/reference/version_locker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version locker contents — version_locker","text":"","code":"version_locker(where, version = \"save\", overwrite = FALSE, noreset = FALSE)"},{"path":"/reference/version_locker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version locker contents — version_locker","text":"locker location. version tag appended creating backup locker contents. overwrite TRUE, new location removed unlink() exists. noreset TRUE, config_locker() called new version mark space noreset.","code":""},{"path":"/reference/version_locker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version locker contents — version_locker","text":"logical value indicating whether files successfully copied backup, invisibly.","code":""},{"path":[]},{"path":"/reference/version_locker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version locker contents — version_locker","text":"","code":"locker <- file.path(tempdir(), \"version-locker-example\")  if(dir.exists(locker)) unlink(locker, recursive = TRUE)  x <- new_stream(1, locker = locker)  cat(\"test\", file = file.path(locker, \"1-1\"))  dir.exists(locker) #> [1] TRUE  list.files(locker, all.files = TRUE) #> [1] \".\"                  \"..\"                 \".paquet-locker-dir\" #> [4] \"1-1\"                 y <- version_locker(locker, version = \"y\")  y #> [1] \"/var/folders/5w/2ky5lwcj1zq7kyk4c3zg3zpw0000gp/T//Rtmpx1IZit/version-locker-example-y\"  list.files(y, all.files = TRUE) #> [1] \".\"                  \"..\"                 \".paquet-locker-dir\" #> [4] \"1-1\""},{"path":"/reference/write_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Writer functions for stream_file objects — write_stream","title":"Writer functions for stream_file objects — write_stream","text":"function write objects assigned format either format_stream() format argument new_stream(). See examples.","code":""},{"path":"/reference/write_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writer functions for stream_file objects — write_stream","text":"","code":"write_stream(x, ...)  # S3 method for default write_stream(x, data, ...)  # S3 method for stream_format_fst write_stream(x, data, dir = NULL, ...)  # S3 method for stream_format_feather write_stream(x, data, dir = NULL, ...)  # S3 method for stream_format_qs write_stream(x, data, dir = NULL, ...)  # S3 method for stream_format_rds write_stream(x, data, dir = NULL, ...)"},{"path":"/reference/write_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writer functions for stream_file objects — write_stream","text":"x file_stream object. ... used. data object write. dir optional directory location used already file spot x.","code":""},{"path":"/reference/write_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writer functions for stream_file objects — write_stream","text":"logical value indicating output written .","code":""},{"path":"/reference/write_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writer functions for stream_file objects — write_stream","text":"default method always returns FALSE; methods get invoked format set return TRUE. , user can always call write_stream() check return value: TRUE, file written disk data need returned; FALSE return value indicates format set data returned. Note write methods can invoked directly specific format format set (see examples).","code":""},{"path":[]},{"path":"/reference/write_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writer functions for stream_file objects — write_stream","text":"","code":"ds <- temp_ds(\"example\")  fs <- new_stream(2, locker = ds, format = \"fst\")  data <- data.frame(x = rnorm(10))  x <- lapply(fs, write_stream, data = data) #> fstcore package v0.9.8 #> (OpenMP was not detected, using single threaded mode)  list.files(ds) #> [1] \"1-2.fst\" \"2-2.fst\"  reset_locker(ds)  fs <- format_stream(fs, \"rds\")  x <- lapply(fs, write_stream, data = data)  list.files(ds) #> [1] \"1-2.rds\" \"2-2.rds\""},{"path":"/news/index.html","id":"paquet-010","dir":"Changelog","previous_headings":"","what":"paquet 0.1.0","title":"paquet 0.1.0","text":"Initial release","code":""}]
